

■JavaScriptの特徴
1.大文字と小文字を区別する
//全て別物だと区別される

const name = "Taro";

const Name = "Taro";

const NAME = "Taro";

2.文はセミコロンで区切られる
・JavaScriptは文ごとに処理が行われ、セミコロン( ; )によって文が区切られる
・セミコロンが無い文も行末に自動でセミコロンが挿入される仕組みとなっているが、意図しない挙動を避けるため、常に書くことが推奨されている
・スペースやタブ文字は空白文字(ホワイトスペース)と呼ばれ、いくつ置いても挙動に違いはない
--------------------------------------------------------------------
// セミコロンで文が区切られる
const name = "Taro";
const age = 20;

// 空白文字の数は挙動に違いはない
console.log(name + "は" + age + "です");  // => Taroは20歳です
console.log(name +   "は"  +  age  +  "歳です");  // => Taroは20歳です
--------------------------------------------------------------------


■コメント
1.一行コメント
--------------------------------------------------------------------
// console.log('こちらは出力されない');
console.log('こちらは開発者コンソールに出力される');
--------------------------------------------------------------------

2.複数行コメント
--------------------------------------------------------------------
/* ここから
・・・
・・・
ここまで */
--------------------------------------------------------------------


■定数・変数
const（定数）
・優先的に使うべき
・再代入 / 再宣言が不可
--------------------------------------------------------------------
const 定数名 = 代入する値;

const name = "Taro";
--------------------------------------------------------------------

let（変数）
・上書きが必要な場合のみ使う
・再代入は可能だが、再宣言は不可
--------------------------------------------------------------------
let 変数名 = 代入する値;

let name = "Taro";

//再代入
name = "Hanako";
--------------------------------------------------------------------

var（変数）
・使わなくていい
・再代入、再宣言が可能
--------------------------------------------------------------------
var 変数名 = 代入する値;

var name = "Taro";

//再代入
name = "Hanako";

//再宣言
var name = "Hanako";
--------------------------------------------------------------------

■条件分岐
if文
const number = 6;
--------------------------------------------------------------------
//通常の書き方
if(number>10){
    console.log("numberは10より大きいです");
}else if(number>5){
    console.log("numberは5より大きいです");
}else{
    console.log("numberは5以下です");
}
--------------------------------------------------------------------

switch文
--------------------------------------------------------------------
const n = 4;

switch (n) {
  case 1:
    console.log("1です");
    break;

  case 2:
    console.log("2です");
    break;

  case 3:
    console.log("3です");
    break;

  default:
    console.log("その他");
    break;
}
--------------------------------------------------------------------

■ループ処理
for文
--------------------------------------------------------------------
for(let number=1; number<=100; number++){
  console.log(number);
}
--------------------------------------------------------------------

while文
--------------------------------------------------------------------
//基本構文

let hp = 100;

while (hp >= 0) {
  console.log(`${hp} HP Left!`);
  hp -= 15;
}

//whileの判定処理を後にして1度だけ最初に実行する場合はdo while()が使える

let hp2 = -50;

do {
  console.log(`${hp2} HP Left!`); //-50 HP Left!
  hp2 -= 15;
} while (hp2 > 0);
--------------------------------------------------------------------

※continue
・ ループ処理の中で特定の条件の時だけ、処理をスキップさせる
--------------------------------------------------------------------
for (let i = 1; i <= 10; i++) {
  // 3の倍数の時だけスキップさせる
  if (i % 3 === 0) {
    continue;
  }
  console.log(i);
}
--------------------------------------------------------------------

※break
・ ループ処理の中で特定の条件の時に、ループ処理を抜ける
--------------------------------------------------------------------
for (let i = 1; i <= 10; i++) {
  // iが4になったらbreakして処理が終了する
  if (i === 4) {
    break;
  }
  console.log(i);
}
--------------------------------------------------------------------

■スコープ(有効範囲)
・ブロックとは { } で囲まれたコード
・ブロック内で定数や変数が宣言された場合、基本的にはそのブロック内だけで有効となる
--------------------------------------------------------------------
function f () {
  // 定数や変数がブロック内で宣言された場合
  // その定数や変数はこのブロックの中でだけ有効というルールがある
  const x = 1;
  console.log(x);
}

f();
console.log(x); // x is not defined
--------------------------------------------------------------------

■関数
・複数の処理をひとまとまりにしたもの（メソッドと呼ばれることもある）
・関数を利用することで目的ごとに処理を分割したり、似たような処理を何度も書かなくて済む

関数宣言（基本）
・functionを使って関数を定義する
--------------------------------------------------------------------
function 関数名（引数1, 引数2,...） {
  処理1
  処理２
・・・
}

//例１
function sanmple() {
  let text = 'Hello';
  console.log( text );
}

//例2
function hello1(name) {
  let message = "Hello, " + name
  return message
}
--------------------------------------------------------------------

関数式
・JavaScriptでは、関数を定数や変数に代入することができる
--------------------------------------------------------------------
const hello = function(name) {
  console.log('Hello' + name);
}

hello('Sato!');  //HelloSato!
--------------------------------------------------------------------

アロー関数
・アロー関数は常に関数式であり、関数定義はできない
・「function」キーワードの代わりに「=>」を用いて、記述を省略できる

--------------------------------------------------------------------
const hello = (name) => {
  console.log('Hello' + name);
}

hello('Sato!');  //HelloSato!
--------------------------------------------------------------------
■Ansible
Python製のインフラ構築自動化ツール（構成管理ツール）
→「サーバ等のあるべき姿（構成）をファイルで管理する」ためのツール
Terraform：インフラ層の構成管理
Ansible:OSやミドルウェア層の構成管理
 
 
■記法
Ansibleのyamlの{{}}は変数、j2の{{}}は記法。（実際の実行時にこの変数が具体的な値で置き換えられる）
 
 
■変数
Ansible：プレイブック内で変数を定義しなくても、ホスト変数やグループ変数はプレイブック内で参照できる
Ansibleは自動的に対象のホストやグループに関連付けられた変数を利用することが可能
☆Ansibleの参照順序
1 ./host_vars/ディレクトリ内のホスト変数のファイルが最初に検索される。（具体的なホスト名に一致するホスト変数のファイルがあればそれが使用される）
2 対象のホストがどのグループに属するかに応じて./group_vars/ディレクトリ内のグループ変数が検索される
3 プレイブック内で直接Varsセクションで定義された変数
4 プレイブック内のVars_filesセクションを使って外部のファイルから読み込まれた変数
5 Ansibleのコマンドラインから渡された変数
※host_varsで定義した変数とVar_filesで読み込んだファイルで定義した変数だったらhost_varsの変数が優先される（同じ変数があった場合）
 
 
■inventory
ホストやグループを定義するインベントリファイルを格納する
例
develop>develop.ini
production>production.ini
 
develop.ini=設定ファイル（インベントリファイル）
※iniはinitials(頭文字)の略、Windowsで”初めて”採用された設定ファイルの拡張子
（ホストがどのグループに属しているかを特定するためのファイル）
 
1.インベントリはセクションで始まる。
セクションは［...］で表されホストやグループをまとめる単位である。
2.ホストの定義
ホストは各セクション内でhostname ansible_host=ip_addressの形式で定義される
hostname：ホスト名
ip_address：ホストのIPアドレス
3.ホストグループ
セクションにはホストだけでなくホストをまとめるためのグループも含めることができる
 
ex.
[web] #web1とweb2という名前のホストが属するwebグループ
web1 ansible_host=192.168.1.101
web2 ansible_host=192.168.1.102
 
[db] #db1という名前のホストが属するdbグループ
db1 ansible_host=192.168.1.201
 
[app:children] #appグループを定義し、そのappグループがwebグループとdbグループを子グループとして含んでいる
web
db
 
[prod:children] #prodグループを定義し、そのprodグループがappグループを子グループとして含んでいる
app
 
ansibleが下記のパスの変数を参照できるようになる
./group_vars/app/web.yaml
./host_vars/web1.yaml
 
 
■group_vars
特定のホストグループに適用される変数を定義する
 
 
■host_vars
特定のホストに適用される変数を定義する
 
 
■roles
roles配下のymlはmain.ymlのみが読み込まれる
*主なディレクトリ・ファイル
tasks>main.yml　#該当ロールに関連するタスクをまとめて定義するファイル
handlers>main.yml　#ハンドラを定義（他のタスクより「通知」されることで実行される）
templates>template.j2　#設定ファイルなどのテンプレートを格納する
files>file.conf　#ホストに転送する静的なファイルを格納する
vars>main.yml　#ロール専用の変数を定義
defaults>main.yml　#ロールのデフォルト変数を定義する
meta>main.yml　#メタデータを定義する
*記述例
- name: xxx[タスクの名前を定義]
  become: true[権限昇格の指定(指定しない場合、デフォルトでrootとして実行される)]
  copy:
    remote_src: true[Ansibleが実行されているノードではなく、リモートノード上のファイルを対象として処理を行う可を決定するオプション]
    src: "{{ conf_path }}xxx.conf"
    dest: "/tmp/xxx.conf_{{ date }}"
    mode: '644'[コピー先のパーミッションモードの指定]
 
- name: xxx[タスクの名前を定義]
  become: true
  template:
    src: "../templates/{{ os_version }}/xxx.j2"
    dest: "{{ conf_path }}xxx.conf"
    mode: '644'
 
 
■playbook
Ansibleの指示書
複数のタスクやロールをまとめて定義する
*用語説明
Play:一つ以上のホストに対して実行される一連のタスクを定義する
Task:特定の操作（ファイルのコピー、サービスの起動等）を定義する
Role:再利用可能なタスクやファイルのコレクション
Module:タスク内で使用されるAnsibleの機能単位。タスクの具体的な操作を実行する
*主要プロパティ
- name: xxx[プレイの名前を定義]
  hosts:
    - xxx[タスクを実行する対象のホストやホストグループを定義]
  roles:
    - xxx[定義したロールを使用]
  vars_files:
    - inventory/develop/xxxx/xxx.yml[外部の変数ファイルを読み込むためのプロパティ]
  tags: xxx[タスクやプレイにタグを付けることで特定のタスクだけを実行したり除外したりすることができる]
 
 
■README.md
例：プロジェクトの概要や使用方法を記載する
 
 
■タグスキップ
*Playbookの上から下へ順番に実行される(つまり、失敗した所以降のタスクは通常実行されていない)
失敗したとき
→「テンプレート」より、再度テンプレートを選択し、「編集」ボタンを押下
→ジョブタグかスキップタグのどちらかにPlaybookのtags部分のタグを入力する
*ジョブタグ：実行したいタスクのみ記入
*スキップタグ：スキップしたいタスクのみ記入
→「保存」
→「起動」
 
 
■ジョブタイプ
run:playbookを起動し、選択されたホストでAnsibleタスクを実行する